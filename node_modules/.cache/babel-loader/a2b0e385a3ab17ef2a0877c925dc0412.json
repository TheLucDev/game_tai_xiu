{"ast":null,"code":"import { PLAY_GAME, TAI, XIU } from \"../constants/xucXacConstant\";\nimport { randomIntFreomInterval } from \"../utils/randomNum\";\nlet initialState = {\n  luaChon: null,\n  soLuotChoi: 0,\n  soLuotThang: 0,\n  mangXucXac: [{\n    hinhAnh: \"./gameXucXacImg/1.png\",\n    giaTri: 1\n  }, {\n    hinhAnh: \"./gameXucXacImg/1.png\",\n    giaTri: 1\n  }, {\n    hinhAnh: \"./gameXucXacImg/1.png\",\n    giaTri: 1\n  }]\n};\nexport const xucXacReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case XIU:\n      return { ...state,\n        luaChon: XIU\n      };\n\n    case TAI:\n      return { ...state,\n        luaChon: TAI\n      };\n\n    case PLAY_GAME:\n      {\n        let cloneState = { ...state\n        };\n        let count = 0;\n        let newMangXucXac = cloneState.mangXucXac.map(xucXac => {\n          let random = randomIntFreomInterval(1, 6);\n          count += random;\n          return {\n            hinhAnh: `./gameXucXacImg/${random}.png`,\n            giaTri: random\n          };\n        });\n        cloneState.luaChon == TAI && count <= 11 && cloneState.soLuotThang++;\n        return { ...cloneState,\n          mangXucXac: newMangXucXac\n        };\n      }\n\n    default:\n      return { ...state\n      };\n  }\n};","map":{"version":3,"sources":["/Users/luc/Desktop/Workspace/CyberSoft/ReactJS_buoi3/template-game/src/redux/reducer/xucXacReducer.js"],"names":["PLAY_GAME","TAI","XIU","randomIntFreomInterval","initialState","luaChon","soLuotChoi","soLuotThang","mangXucXac","hinhAnh","giaTri","xucXacReducer","state","action","type","cloneState","count","newMangXucXac","map","xucXac","random"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,6BAApC;AACA,SAASC,sBAAT,QAAuC,oBAAvC;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,IADQ;AAEjBC,EAAAA,UAAU,EAAE,CAFK;AAGjBC,EAAAA,WAAW,EAAE,CAHI;AAIjBC,EAAAA,UAAU,EAAE,CACV;AACEC,IAAAA,OAAO,EAAE,uBADX;AAEEC,IAAAA,MAAM,EAAE;AAFV,GADU,EAKV;AACED,IAAAA,OAAO,EAAE,uBADX;AAEEC,IAAAA,MAAM,EAAE;AAFV,GALU,EASV;AACED,IAAAA,OAAO,EAAE,uBADX;AAEEC,IAAAA,MAAM,EAAE;AAFV,GATU;AAJK,CAAnB;AAoBA,OAAO,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBR,YAAyB;AAAA,MAAXS,MAAW;;AAC7D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,GAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYP,QAAAA,OAAO,EAAEH;AAArB,OAAP;;AACF,SAAKD,GAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYP,QAAAA,OAAO,EAAEJ;AAArB,OAAP;;AACF,SAAKD,SAAL;AAAgB;AACd,YAAIe,UAAU,GAAG,EAAE,GAAGH;AAAL,SAAjB;AACA,YAAII,KAAK,GAAG,CAAZ;AACA,YAAIC,aAAa,GAAGF,UAAU,CAACP,UAAX,CAAsBU,GAAtB,CAA2BC,MAAD,IAAY;AACxD,cAAIC,MAAM,GAAGjB,sBAAsB,CAAC,CAAD,EAAI,CAAJ,CAAnC;AACAa,UAAAA,KAAK,IAAII,MAAT;AACA,iBAAO;AACLX,YAAAA,OAAO,EAAG,mBAAkBW,MAAO,MAD9B;AAELV,YAAAA,MAAM,EAAEU;AAFH,WAAP;AAID,SAPmB,CAApB;AAQAL,QAAAA,UAAU,CAACV,OAAX,IAAsBJ,GAAtB,IAA6Be,KAAK,IAAI,EAAtC,IAA4CD,UAAU,CAACR,WAAX,EAA5C;AACA,eAAO,EAAE,GAAGQ,UAAL;AAAiBP,UAAAA,UAAU,EAAES;AAA7B,SAAP;AACD;;AACD;AACE,aAAO,EAAE,GAAGL;AAAL,OAAP;AApBJ;AAsBD,CAvBM","sourcesContent":["import { PLAY_GAME, TAI, XIU } from \"../constants/xucXacConstant\";\nimport { randomIntFreomInterval } from \"../utils/randomNum\";\n\nlet initialState = {\n  luaChon: null,\n  soLuotChoi: 0,\n  soLuotThang: 0,\n  mangXucXac: [\n    {\n      hinhAnh: \"./gameXucXacImg/1.png\",\n      giaTri: 1,\n    },\n    {\n      hinhAnh: \"./gameXucXacImg/1.png\",\n      giaTri: 1,\n    },\n    {\n      hinhAnh: \"./gameXucXacImg/1.png\",\n      giaTri: 1,\n    },\n  ],\n};\n\nexport const xucXacReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case XIU:\n      return { ...state, luaChon: XIU };\n    case TAI:\n      return { ...state, luaChon: TAI };\n    case PLAY_GAME: {\n      let cloneState = { ...state };\n      let count = 0;\n      let newMangXucXac = cloneState.mangXucXac.map((xucXac) => {\n        let random = randomIntFreomInterval(1, 6);\n        count += random;\n        return {\n          hinhAnh: `./gameXucXacImg/${random}.png`,\n          giaTri: random,\n        };\n      });\n      cloneState.luaChon == TAI && count <= 11 && cloneState.soLuotThang++;\n      return { ...cloneState, mangXucXac: newMangXucXac };\n    }\n    default:\n      return { ...state };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}